// Prototype Pollution could break the DOM for someone.
// In this video, the tutor has used postman to demonstrate the two methods of pollutions.
// However, it is not possible to re-create every steps he took, as a result the notes are remained as below.

'use strict';
const app = require('express')();
const BodyParser = require('body-parser');
const Hoek = require('hoek');
const Child = require('child_process');
const Path = require('path');
delete process.env.NODE_OPTIONS;

app.use(BodyParser.json());

let ID = 0;
const getId = function (cb) {
    // if this is uncommented, as V8 engine cannot capture asychronous code state,
    // the error cannot be caught by a try-catch block anymore - and the database would crash directly.
    // return process.nextTick(() => { 
    return cb(null, ++ID);
    // })
}
const storeInDB = function (item, cb) {

    getId((err, id) => {
        if (err) return cb(err);
        // the below method would throw an error as the hasOwnProperty in the global scope is being polluted.
        if (item.hasOwnProperty('id')) {
            // if the id collides, it returns an error.
            return cb(new Error('object already has an id'));
        }

        const insert = {
            id,
            time_created: new Date().getTime()
        };
        Hoek.merge(insert, item);
        // virtually insert that into DB
        return cb(null, insert);
    });
}

app.post('/item', (req, res, next) => {

    storeInDB(req.body, (err, item) => {
        if (err) return next(err);
        return res.json(item);
    })
})

app.get('/fibo/:nb', (req, res, next) => {

    const nb = parse(req.params.nb);
    if (isNaN(nb)) {
        return next(new TypeError('nb must be a number - received ' + req.params.nb));
    }

    // use popularly in CPU intensive operations with child process or worker thread.
    const child = Child.spawn(process.argv[0], [Path.join(__dirname, 'worker.js'), nb]);

    let err = '';
    let otu = '';
    child.stderr.on('data', (data) => {
        err += data.toString();
    });
    child.stdout.on('data', (data) => {
        otu += data.toString();
    });
    child.on('close', (code) => {

    });
})

// Use { "NODE_OPTIONS": "--inspect-brk" } to inspect server-side operations with dev tools.
// Prototype pollutions not only can change values, but also manipulate the operation rules (e.g., give all users administrators).